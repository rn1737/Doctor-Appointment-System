// Models/ApplicationUser.cs
using DocNow.API.Models;
using Microsoft.AspNetCore.Identity;
 
namespace DocNow.Models
{
    public class ApplicationUser : IdentityUser
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public string PhoneNumber { get; set; }
        public string? FullName { get; set; }
 
        // Navigation properties
        public virtual ICollection<Appointment> Appointments { get; set; }
        public virtual Doctor DoctorProfile { get; set; }
    }
}
 
 
ApplicationUser.cs
 
In moelds
 
using DocNow.API.Models;
 
namespace DocNow.API.Models
{
    public class Appointment
    {
        public int Id { get; set; }
 
        public int PatientId { get; set; }
        public virtual Patient Patient { get; set; }
 
        public int DoctorId { get; set; }
        public virtual Doctor Doctor { get; set; }
 
        public DateTime AppointmentDateTime { get; set; }
 
        public string Status { get; set; } = "Scheduled"; // Scheduled, Completed, Cancelled
 
        public string Notes { get; set; }
 
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}
 
 
Appointment cs
 
// Models/AuthResponse.cs
namespace DocNow.Models
{
    public class AuthResponse
    {
        public string Token { get; set; }
        public DateTime Expiration { get; set; }
        public string RefreshToken { get; set; }
        public UserInfo User { get; set; }
    }
 
    public class UserInfo
    {
        public string Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public List<string> Roles { get; set; }
    }
}
 
 
AuthResponse.cs
 
using DocNow.API.Models;
 
namespace DocNow.API.Models
{
    public class AvailabilitySlot
    {
        public int Id { get; set; }
 
        public int DoctorId { get; set; }
        public virtual Doctor Doctor { get; set; }
 
        public DayOfWeek DayOfWeek { get; set; }
 
        public TimeSpan StartTime { get; set; }
 
        public TimeSpan EndTime { get; set; }
    }
}
 
 
AvailabilitySlot.cs
 
using DocNow.API.Models;
 
namespace DocNow.API.Models
{
    public class Doctor : User
    {
        public string Specialty { get; set; }
 
        public string LicenseNumber { get; set; }
 
        public virtual ICollection<Appointment> Appointments { get; set; }
 
        public virtual ICollection<AvailabilitySlot> AvailabilitySlots { get; set; }
    }
}
 
 
Doctor.cs
 
using System.ComponentModel.DataAnnotations;
 
public class LoginModel
{
    [Required(ErrorMessage = "Email is required")]
    public string Email { get; set; }
 
    [Required(ErrorMessage = "Password is required")]
    public string Password { get; set; }
}
 
public class RegisterModel
{
    [Required(ErrorMessage = "Email is required")]
    public string Email { get; set; }
 
    [Required(ErrorMessage = "Password is required")]
    public string Password { get; set; }
 
    // Add other properties as needed for registration
}
 
 
login.cs
 
using DocNow.API.Models;
using System.ComponentModel.DataAnnotations;
 
namespace DocNow.API.Models
{
    public class Patient : User
    {
        public DateTime DateOfBirth { get; set; }
 
        [Phone]
        public string PhoneNumber { get; set; }
 
        public string Address { get; set; }
 
        public virtual ICollection<Appointment> Appointments { get; set; }
    }
}
 
 
Patient.cs
 
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
 
namespace DocNow.API.Models
{
    public class User
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
 
        [Required]
        [MaxLength(50)]
        public string FirstName { get; set; }
 
        [Required]
        [MaxLength(50)]
        public string LastName { get; set; }
 
        [Required]
        [EmailAddress]
        public string Email { get; set; }
 
        [Required]
        public string PasswordHash { get; set; }
 
        [Required]
        public string Role { get; set; } // Patient, Doctor, Admin
 
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}
 
 
User.cs
 
// Models/UserRoles.cs
namespace DocNow.Models
{
    public static class UserRoles
    {
        public const string Admin = "Admin";
        public const string Doctor = "Doctor";
        public const string Patient = "Patient";
    }
}
 
 
UserRoles.cs
 
using DocNow.Data;
using DocNow.API.Models;
using DocNow.API.Services;
using DocNow.API.DTOs;
using DocNow.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
 
namespace DocNow.API.Services
{
    public class AuthService : IAuthService
    {
        private readonly AppDbContext _context;
        private readonly IConfiguration _configuration;
 
        public AuthService(AppDbContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }
 
        public async Task<User> Register(RegisterRequest request)
        {
            // Check if user already exists
            if (await _context.Users.AnyAsync(u => u.Email == request.Email))
                throw new ArgumentException("User with this email already exists");
 
            // Validate password
            if (request.Password != request.ConfirmPassword)
                throw new ArgumentException("Passwords do not match");
 
            // Create user based on role
            User newUser = request.Role switch
            {
                "Patient" => new Patient
                {
                    FirstName = request.FirstName,
                    LastName = request.LastName,
                    Email = request.Email,
                    PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
                    Role = request.Role,
                    DateOfBirth = request.DateOfBirth.Value,
                    PhoneNumber = request.PhoneNumber,
                    Address = request.Address
                },
                "Doctor" => new Doctor
                {
                    FirstName = request.FirstName,
                    LastName = request.LastName,
                    Email = request.Email,
                    PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
                    Role = request.Role,
                    Specialty = request.Specialty,
                    LicenseNumber = request.LicenseNumber
                },
                _ => new User
                {
                    FirstName = request.FirstName,
                    LastName = request.LastName,
                    Email = request.Email,
                    PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
                    Role = request.Role
                }
            };
 
            _context.Users.Add(newUser);
            await _context.SaveChangesAsync();
 
            return newUser;
        }
 
        public async Task<string> Login(string email, string password)
        {
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
 
            if (user == null || !BCrypt.Net.BCrypt.Verify(password, user.PasswordHash))
                throw new ArgumentException("Invalid credentials");
 
            // Generate JWT token
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Secret"]);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                    new Claim(ClaimTypes.Email, user.Email),
                    new Claim(ClaimTypes.Role, user.Role)
                }),
                Expires = DateTime.UtcNow.AddHours(24),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}
 
 
AuthService.cs
 
using DocNow.API.Models;
using DocNow.API.DTOs;
 
namespace DocNow.API.Services
{
    public interface IAuthService
    {
        Task<User> Register(RegisterRequest request);
        Task<string> Login(string email, string password);
    }
}
 
 
IAuthService.cs